name: Fetch iOS Reviews

on:
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      timedelta:
        description: 'Time window in hours to fetch reviews'
        required: false
        default: '72'
      quantity:
        description: 'Max number of reviews to fetch'
        required: false
        default: '50'

jobs:
  fetch-ios-reviews:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    env:
      KEY_ID: ${{ secrets.KEY_ID }}
      ISSUER_ID: ${{ secrets.ISSUER_ID }}
      APPLE_APP_ID: ${{ secrets.APPLE_APP_ID }}
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Save Apple .p8 key to file
        run: echo "${{ secrets.PRIVATE_KEY }}" > AuthKey.p8

      - name: Determine trigger type
        id: context
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "trigger=manual" >> $GITHUB_OUTPUT
            echo "user=${{ github.actor }}" >> $GITHUB_OUTPUT
            echo "timedelta=${{ github.event.inputs.timedelta }}" >> $GITHUB_OUTPUT
            echo "quantity=${{ github.event.inputs.quantity }}" >> $GITHUB_OUTPUT
          else
            echo "trigger=scheduled" >> $GITHUB_OUTPUT
            echo "user=github-scheduler" >> $GITHUB_OUTPUT
            echo "timedelta=72" >> $GITHUB_OUTPUT
            echo "quantity=50" >> $GITHUB_OUTPUT
          fi

      - name: Run iOS Review Fetcher
        id: fetcher
        env:
          PRIVATE_KEY_FILE: AuthKey.p8
        run: |
          python main.py --ios --send-discord --timedelta ${{ steps.context.outputs.timedelta }} --quantity ${{ steps.context.outputs.quantity }} > review.log 2>&1
          tail -n 20 review.log > tail.log
          echo "tail<<EOF" >> $GITHUB_OUTPUT
          cat tail.log >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Notify Discord - Success
        if: success()
        run: |
          USER="${{ steps.context.outputs.user }}"
          TRIGGER="${{ steps.context.outputs.trigger }}"
          TAIL="${{ steps.fetcher.outputs.tail }}"

          JSON=$(jq -n \
            --arg desc "üë§ D√©clench√© par : **$USER**
            üìù Derni√®res lignes du log :
            \`\`\`
            $TAIL
            \`\`\`" \
            --arg name "‚úÖ Avis iOS r√©cup√©r√©s avec succ√®s" \
            --arg icon "https://cdn-icons-png.flaticon.com/512/14090/14090371.png" \
            '{
              embeds: [
                {
                  description: $desc,
                  color: 3381606,
                  author: {
                    name: $name,
                    icon_url: $icon
                  }
                }
              ]
            }'
          )

          curl -s -X POST -H "Content-Type: application/json" \
            -d "$JSON" \
            ${{ secrets.DISCORD_WEBHOOK_URL_LOGGER }}

      - name: Notify Discord - Failure
        if: failure()
        run: |
          USER="${{ steps.context.outputs.user }}"
          SHA="${{ github.sha }}"
          TAIL=${{ steps.fetcher.outputs.tail }}"

          JSON=$(jq -n \
            --arg desc "üë§ D√©clench√© par : **$USER**
            ‚ùå Commit : $SHA
            üìù Derni√®res lignes du log :
            \`\`\`
            $TAIL
            \`\`\`" \
            --arg name "üö® Erreur lors de la r√©cup√©ration des avis iOS" \
            --arg icon "https://cdn-icons-png.flaticon.com/512/753/753345.png" \
            '{
              embeds: [
                {
                  description: $desc,
                  color: 15605837,
                  author: {
                    name: $name,
                    icon_url: $icon
                  }
                }
              ]
            }'
          )

          curl -s -X POST -H "Content-Type: application/json" \
            -d "$JSON" \
            ${{ secrets.DISCORD_WEBHOOK_URL_LOGGER }}
